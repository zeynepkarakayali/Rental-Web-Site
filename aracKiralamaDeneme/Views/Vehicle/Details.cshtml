@model aracKiralamaDeneme.Models.ViewModels.VehicleDetailsViewModel

@{
    ViewData["Title"] = $"{Model.Vehicle.Brand} {Model.Vehicle.Model} Detayları";
}

<div class="container my-5" data-daily-price="@Model.Vehicle.DailyRentalPrice.ToString("F2").Replace(',', '.')">

    <div class="row mb-4">
        <div class="col">
            
            <h1 class="display-5 fw-bold">@Model.Vehicle.Brand @Model.Vehicle.Model</h1>
            @await Html.PartialAsync("_VehicleNote", "Araç detaylarını görmek için aşağı kaydırabilirsiniz.")

            @if (Model.Vehicle.IsPopular)
            {
                <span class="badge bg-warning text-dark fs-6">⭐ Popüler Seçim</span>
            }
            
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8 mb-4 mb-lg-0">
            <div id="vehicleCarousel" class="carousel slide shadow-lg rounded-3" data-bs-ride="carousel">
                <div class="carousel-inner rounded-3">
                    <div class="carousel-item active">
                        <img src="@Model.Vehicle.ImageUrl" class="d-block w-100" alt="Ana Görsel">
                    </div>
                    @* <div class="carousel-item">
                        <img src="/images/arac-ici.jpg" class="d-block w-100" alt="İç Görsel">
                    </div>
                    <div class="carousel-item">
                        <img src="/images/arac-yan.jpg" class="d-block w-100" alt="Yan Görsel">
                    </div> 
                    *@
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#vehicleCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#vehicleCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card shadow-lg border-0 rounded-3">
                <div class="card-body p-4">
                    <div class="mb-3">
                        <span class="fs-2 fw-bold text-primary">@Model.Vehicle.DailyRentalPrice.ToString("C0")</span>
                        <span class="text-muted">/günlük</span>
                    </div>
                    <hr>
                    <form asp-controller="Rental" asp-action="Checkout" method="get" id="rentalForm">
                        <input type="hidden" name="vehicleId" value="@Model.Vehicle.VehicleId" />

                        <div class="mb-3">
                            <label for="startDate" class="form-label fw-semibold">Alış Tarihi</label>
                            <input type="text" id="startDate" name="startDate" class="form-control" placeholder="Tarih seçin...">
                        </div>

                        <div class="mb-3">
                            <label for="endDate" class="form-label fw-semibold">Dönüş Tarihi</label>
                            <input type="text" id="endDate" name="endDate" class="form-control" placeholder="Tarih seçin...">
                        </div>

                        <div id="price-calculation" class="p-3 bg-light rounded-3 mb-3 text-center d-none">
                            <p class="mb-1 text-muted">Tahmini Toplam Tutar</p>
                            <h4 id="totalPrice" class="fw-bold">0 ₺</h4>
                        </div>

                        <div id="status-container" class="mb-3 text-center">
                            <span id="statusText" class="fw-bold"></span>
                        </div>

                        @if (User.Identity.IsAuthenticated)
                        {
                            if (Model.CanRent)
                            {
                                <button id="rentButton" type="submit" class="btn btn-primary w-100 btn-lg" disabled>
                                    🚗 Şimdi Kirala
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-secondary w-100 btn-lg" disabled>
                                    🚫 Ehliyet Yetersiz
                                </button>
                            }
                        }
                        else
                        {
                            <a href="/Identity/Account/Login?returnUrl=@Context.Request.Path" class="btn btn-warning w-100 btn-lg">
                                🚪 Kiralamak için Giriş Yap
                            </a>
                        }
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-12">
            <div class="card shadow-sm rounded-3">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs" id="myTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details" type="button" role="tab">🛠️ Teknik Özellikler</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="description-tab" data-bs-toggle="tab" data-bs-target="#description" type="button" role="tab">📄 Açıklama</button>
                        </li>
                    </ul>
                </div>
                <div class="card-body">
                    <div class="tab-content" id="myTabContent">
                        <div class="tab-pane fade show active" id="details" role="tabpanel">
                            <div class="row g-3">
                                <div class="col-md-6 d-flex align-items-center"><i class="fas fa-car fa-fw me-2 text-primary"></i> <strong>Marka:</strong><span class="ms-2">@Model.Vehicle.Brand</span></div>
                                <div class="col-md-6 d-flex align-items-center"><i class="fas fa-car-side fa-fw me-2 text-primary"></i> <strong>Model:</strong><span class="ms-2">@Model.Vehicle.Model</span></div>
                                <div class="col-md-6 d-flex align-items-center"><i class="fas fa-gas-pump fa-fw me-2 text-primary"></i> <strong>Yakıt:</strong><span class="ms-2">@Model.Vehicle.FuelType</span></div>
                                <div class="col-md-6 d-flex align-items-center"><i class="fas fa-id-card fa-fw me-2 text-primary"></i> <strong>Plaka:</strong><span class="ms-2">@Model.Vehicle.PlateNumber</span></div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="description" role="tabpanel">
                            <p class="lead">@Model.Vehicle.LongDescription</p>
                            <p>@Model.Vehicle.ShortDescription</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Elementleri seçme
            const rentButton = document.getElementById('rentButton');
            const statusText = document.getElementById('statusText');
            const container = document.querySelector('.container');
            const dailyPrice = parseFloat(container.dataset.dailyPrice);
            const totalPriceElement = document.getElementById('totalPrice');
            const priceCalculationDiv = document.getElementById('price-calculation');

            let unavailableDates = [];

            // Dolu tarihleri sunucudan al
            fetch(`/Vehicle/GetUnavailableDates?vehicleId=@Model.Vehicle.VehicleId`)
                .then(res => res.json())
                .then(data => {
                    unavailableDates = data;
                    initializePickers(); // Tarih seçicileri bu veri geldikten sonra başlat
                });

            let startPicker, endPicker;

            function initializePickers() {
                const today = new Date().fp_incr(-1); // Dün, bugünün seçilebilmesi için

                startPicker = flatpickr("#startDate", {
                    altInput: true,
                    altFormat: "d F Y",
                    dateFormat: "Y-m-d",
                    minDate: "today",
                    disable: unavailableDates,
                    onChange: function (selectedDates, dateStr, instance) {
                        if (selectedDates.length > 0) {
                             // Bitiş tarihinin başlangıçtan önce olmasını engelle
                            endPicker.set('minDate', selectedDates[0]);
                             // Eğer bitiş tarihi başlangıçtan önceyse, bitişi bir gün sonrasına ayarla
                            if(endPicker.selectedDates.length > 0 && endPicker.selectedDates[0] < selectedDates[0]){
                                endPicker.setDate(new Date(selectedDates[0]).fp_incr(1));
                            }
                        }
                        updatePriceAndAvailability();
                    }
                });

                endPicker = flatpickr("#endDate", {
                    altInput: true,
                    altFormat: "d F Y",
                    dateFormat: "Y-m-d",
                    minDate: "today",
                    disable: unavailableDates,
                    onChange: function (selectedDates, dateStr, instance) {
                        updatePriceAndAvailability();
                    }
                });
            }

            function updatePriceAndAvailability() {
                const startDate = startPicker.selectedDates[0];
                const endDate = endPicker.selectedDates[0];

                if (startDate && endDate && endDate >= startDate) {
                    // Toplam fiyatı hesapla ve göster
                    const diffTime = Math.abs(endDate - startDate);
                    // Milisaniyeyi güne çevirirken +1 ekliyoruz çünkü kiralama günleri dahil edilir (örn: 1'inde alıp 2'sinde vermek 2 gündür)
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;

                    const total = diffDays * dailyPrice;
                    totalPriceElement.textContent = total.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
                    priceCalculationDiv.classList.remove('d-none'); // Fiyat alanını görünür yap

                    // Müsaitlik kontrolü
                    checkAvailability(startPicker.input.value, endPicker.input.value);

                } else {
                    priceCalculationDiv.classList.add('d-none'); // Tarihler geçersizse fiyat alanını gizle
                    if(rentButton) rentButton.disabled = true;
                    statusText.textContent = 'Lütfen geçerli bir tarih aralığı seçin.';
                    statusText.className = 'fw-bold text-warning';
                }
            }

            function checkAvailability(start, end) {
                 fetch(`/Vehicle/CheckAvailability?vehicleId=@Model.Vehicle.VehicleId&startDate=${start}&endDate=${end}`)
                    .then(res => res.json())
                    .then(data => {
                        statusText.textContent = data.message;
                        if(rentButton) rentButton.disabled = !data.available;

                        // Mesajı renklendir
                        if (data.available) {
                            statusText.className = 'fw-bold text-success';
                        } else {
                            statusText.className = 'fw-bold text-danger';
                        }
                    });
            }
        });
    </script>
}